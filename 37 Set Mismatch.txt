You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.




ex1

1 4 3 2 5 6 7


nums
1 4 4 2 5 6 7	//3removed	//given



ex2
2 1 4 2 6 5

nums

1 2 2 

Q)How to calculate nums? Try sorting the given array
	
Note: think where should no. go, NOT what this index should contain
given array
	3 1 4 2 6 5

Calculate nums
-> 
	2 1 4 2 6 5
	1 2 4 2 6 5	
	1 2 2 4 6 5
	1 2 2 4 5 6 = nums	
	

Q) How to track which number was removed?

sort the given array
1 2 2 4 5 6 = nums
  , the one number out of repeating number was removed and replaced

find which number missing from sorted array = no. at incorrect position = index + 1 = duplicate no.
 (arr[i] != i+1 OR arr[i] = arr[correct])



class Solution {
	public int[] findErrorNums (int[] arr) {
	int i= 0;
	while(i< arr.length) {
		int correct = arr[i] - 1;	    //define correct position for an element
		if (arr[i] != arr[correct]) {
			swap(arr,i, correct);
	    } else {
		    i++;
	    }
}

for(int index = 0; index < arr.length; index++) {
   if (arr[index] != index + 1) {
	return new int[] {arr[index], index+1};
		}
	}
  
   return new int[] {-1,-1}; 
}

static void swap(int[] arr, int first, int second) {
	int temp  = arr[first];
	arr[first] = arr[second];
	arr[second] = temp;
	
	} 

}
