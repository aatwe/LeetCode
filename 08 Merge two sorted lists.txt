What given? 
	linked list a		//sorted	//increasing/constant
	linked list b		//sorted  //increasing/constant


What definition of linked list?
public class ListNode {
	int val;	
	ListNode next;
	ListNode(int x){val = x}	
}


What output? merge into 1 sorted list
	

Solution:
How to merge 2 sorted list into 1
we get 2 pointers for 2 linked lists l1 and l2
1 pointer for sorted linked list : current_node

compare l1 and l2 , whatever is less, is added to the sorted linked list (current_node.next = whichever less)
what if equal nodes? which priority?


Understanding?
1) Create mergeTwoLists method (What input? l1 and l2 2 head nodes of linked lists)
	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
	a.2) Create temp_node	//in LL problem we usually keep temp_node			
		ListNode temp_node = new ListNode(0);
	a.3) Create current_node
		ListNode current_node = temp_node;
	a.4) loop condition : till end of both linked list reached		
		while(l1!=null &&l2!= null){
		a.4.1) compare l1 pointer first value with  l2 pointer first values, if l1< l2 // new LL current_node.next points to l1
		    if(l1.val < l2.val)					//Why? to check and compare first element in l1
			current_node.next = l1;			//Why? insert l1 in current_node	//HOW TO ADD L1 IN linked list
			//move l1 pointer to second element of ll l1	
			l1 = l1.next;				//Why? check and compare 2nd element in l1
		} else {						//if l1 > l2
		current_node.next= l2;				//insert l2 to current node LL		
		l2= l2.next; 					//Why? check and compare 2nd element in l2
		}
		current_node = current_node.next			//how to add at next position in current_node LL
		}
		
		if(l1!=null) {					//What if l2 reached null and l1 didnt
			current_node.next = l1;				insert l1's next elements in current_node
			l1 = l1.next;	
}
		if(l1!=null) {					//What if l1 reached null and l2 didnt
			current_node.next = l2;				insert l2's next elements in current_node
			l2 = l2.next;	
}
		return temp_node.next;				////How is this printing the whole linked list?				
}								Doube how is final sorted list printed
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
     
        ListNode temp_node = new ListNode(0);
        ListNode current_node = temp_node;
        
        while(list1 != null && list2 != null){
                if(list1.val < list2.val) {
                    current_node.next = list1;
                    list1 = list1.next;    
                } else {
                    current_node.next = list2;
                    list2 = list2.next;
                    
                }   
                
                  current_node = current_node.next;
            
        }
                if(list1!= null) {
                    current_node.next = list1;
                    list1= list1.next;                       
                }
                if(list2!= null) {
                    current_node.next = list2;
                    list2 = list2.next;                       
                }
                return temp_node.next;
    }
}