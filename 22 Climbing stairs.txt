Objective: climb staircase
//Solving problem bottom up


how to climb?
		1 step
		2 step

Input: total steps in staircase //n
Output: how many ways to reach top

What base case?
	1) how many ways to climb 0 stairs? 1	//dont climb
	2) how many ways to climb 1 stairs? 1  // do climb
	3) how many ways to climb 2 stairs? 1  // {1,1} and {2]
	4) how many ways to climb 3 stairs?  3  ({1,2}{1,1,1}, {2,1})
	5) how many ways to climb 4 stairs?  	 {1,1,1,1,}  , {1,2,1} ,  {1,1,2} , {2,1,1} , {2,2} 

Conclusion: ways to climb n stairs = ways to climb n-2 stairs + ways to climb n-1 stairs		
	
+++++++++++++++++++++++++++++++++++++++++
Pseudo Code
a) Create method to output how many ways to climbStairs. what input?n
	a.1) create array dp. What size? we know 0 stairs also case , so size n+1 
	 //define base case
	a.2) how many ways to climb 0 stair
	a.3) how many ways to climb 1 stair
	a.4) figure out ways to climb remaining steps
b)	

+++++++++++++++++++++++++++++++++++++++++
Code 1

a)  public int climbStairs(int n) {
	a.1) int[] dp = new int[n+1];
	a.2) dp[0] = 1;
	a.3) dp[1] = 1;
	a.4) for(int i=2; i<=n; i++) {
		dp[i] = dp[i-1] +dp[i-2];
	}
	return dp[n];
}
TC
SC: O(n)

++++++++++++++++++++++++++++++++++++++++
Code 2 DP bottom up

b) public int c;imbStairs(int n){
	int pre =1;
	int curr = 1;
	int temp = 0;

	for(int i=1;i< n; i++){
		temp  curr;
		curr = curr + pre;
		pre = temp;
}
		return curr;
}

TC: O(n)
SC : O(1)
+++++++++++++++++++++++++++++++++++++++++
Code 3: Using memoization
	store calculated values in hashmap, avoid recalculating

class Solution {
	private Map<Integer, Integer> memo = new HashMap<>();
	public int climbStairs(int n) {
	 return helper(n);
}
	public int helper(int n){
		int result = 0;
		if (memo.containsKey(n)) return memo.get(n);
		if(n==1) return 1;
		if(n==2) return 2;

		result = (helper(n-1) + helper(n-2));
		memo.put(n,result);
		return result;
}
}

TC = O(n)
SC = O(n)	//recursive stack use

