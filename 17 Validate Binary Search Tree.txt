What given?
a) 	root 	type: TreeNode
b) Definition of Class TreeNode

 public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
	
What input?
		
What output?
	Check if valid BST
		
	How to check if valid BST?
		all nodes in left subtree < root
		all nodes in right subtree > root
		


Ex
	2
           /	     \
        1	       3 
++++++++++++++++++++++++++++++++++
Solution overview:
1) got to leftmost element in tree, track all nodes encountered in stack
2) after reaching left most root node do 3 checks
	a) left_child of current root < current root , if not return false
	b) right child of current root > current root, if not return false
	c) if both ok, make root as left child, pop root, move on to next root
//keep doing 3 checks...
3) once stack empty and no false returned , return true BST

++++++++++++++++++++++++++++++++++

class Solution {	
Create method , what input? root of tree. How to pass root of tree to method? directly pass object
	public boolean isValidBST(TreeNode root) {

	a) how to check if validBST? check all elements in left subtree are smaller than root + right subtree
	   how to check if children in left subtree are smaller than root node? Traverse

	   Objective: for each element : check if left child   < root : true
					 left child   > root : false
					 right child > root : true
	    				 right child > root : false

		a.0) How to traverse a tree?
		Popular methods:  Inorder, PreOrder, PostOrder
		choose inorder (sorted left to right)
		
		a.1) How to track children of a root? stack	
		//Create a stack
		Stack<TreeNode> stack = new Stack();s
		
		a.2) How to store left_child?
		double left_child_val = -Double.MAX_VALUE;	//min value possible

		a.3) //Traversal condition? process while stack is not empty OR root is not null
		while(!stack.isEmpty() || root != null) {
			a.3.1) while(root != null) {
				a.3.1.1) //Push root on stack. Why? we push parents/roots on stack to track
					stack.push(root);
				a.3.1.2) //traverse to left of (root node), make new root node
					root = root.left;
				}
			a.3.2) //leftmost element reached while root!=null  loop finished . Pop the root from stack
			         root = stack.pop();
			
			a.3.3) Check left > root 
			//root = leftmost
			         //for leftmost element, no children.What is left_child_value? -DOUBLEMax //min value possible
			         //is root.cal < min value possible ? No -> stack.pop() , root = 2
			           
				if(root.val <= left_child_val) return false;

			a.3.4) if left < root -> all ok -> assign root to left_child_val		          
				left_child_val = root.val;
			a.3.5) traverse to right of (root node in stack)
			   	root = root.right;
								
			}
		return true;	//if root is null -> true BST	
}
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3 check: 
check left < root
assign left child value	//check left and right subtree also  BST
check right
--------------------------------------
flow for 	
	2
           /	     \
        1	       3 

Overview:
1)
a) check left
1	<  	-DOuble max? 	no -> pop out 1
root	   	root's left_child_val 
b) assign left_child_val
c) check right


2)
2	< 	1? 		no -> pop out 2
root	   	root's left_child_val 
b) assign left_child_val
c) check right
	root = 3


 		



FLow:
root = 2
a3.1) check if root!= null : true
  a.3.1.1) Push root to stack // stack.push(2)
	root = 2
	stack : 2
	root!=null
 a.3.1.2) traverse to left of root node 
	root = 2.left  = 1
	root = 1
	stack : 2
	root!=null
 a.3.1.1)   stack.push(1)
	root = 1
	stack : 2 1
	root!=null
a.3.1.3) traverse to left of root node
	root =1.left = null
	root = null
	stack : 2 1
	while loop exits

a3.2)  root = stack.pop
	stack.pop = 1
	root = 1
	stack : 2

a3.3) Check if root.val <= left_child_val
	1 < -Double.max : not true

a3.4) left_child_val = root.val;
         left_child_val = 1
	root = 1
	stack : 2

a.3.5) root=  root.right = 1.right = null
	root = null
	stack : 2	

a.3.1) SKIP
a.3.2) root = stack.pop() = 2
....
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Bottom -Top
Final Code:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        Stack<TreeNode> stack = new Stack();
        double left_chlid_val = - Double.MAX_VALUE;
      
      
        
        while(!stack.isEmpty() || root != null){
              while(root != null) {
                  stack.push(root);
                  root = root.left;
              } 
            
              root = stack.pop();
              if (root.val <= left_child_val) return false;
              left_child_val = root.val;    
              root = root.right;
        } 
        
        return true;
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++
Code 2
Top-Down using recursion
class Solution { 
		a)isValidBST method
	public boolean isValidBST(TreeNode root) {
		  a.1)// return recursion function validate()
		  // what input? max and min constraints
			//What is max and min?max value and min value in subtree	
		return  validate(root, null, null)
}
		b) define recursion function validate() 
		public boolean validate(TreeNode root, Integer max Integer min) {
		  b.1) When leaf node reached -> no false case identified ->true BST
		   if(root	== null){
			return true;	
		}
		  b.2)  when current element not follows BST?
		  else if(max!=null && root.val > max || min!= null && root.val <= min)
		{
			return false;
		}
		  b.3)  check the left subtree if above true
		else {
			return validate(root.left, root.val, min) && validate(root.right, max, root.val);
 }
		}
}


TC: O(n)
SC: O(n)

Final Code:
class Solution {
    public boolean isValidBST(TreeNode root) {
      return validate(root,null,null);
    } 
    public boolean validate(TreeNode root, Integer max, Integer min){
        if(root == null){return true;}
        else if(max!=null && root.val >= max || min != null && root.val <= min){
        return false;            
        }
        else {
            return validate(root.left, root.val, min) && validate(root.right,max,root.val); 
            
        }        
    
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

Nick's Solution:

class Solution {
    public boolean isValidBST(TreeNode root) {
		      Stack<TreeNode> stack = new Stack();
              double left_child_val = -Double.MAX_VALUE;

	            while(!stack.isEmpty() || root != null) {
			        while(root!= null) {
				    stack.push(root);
			    	root = root.left; 
				}

			     root = stack.pop();
			     if(root.val <= left_child_val) return false;
			     left_child_val = root.val;
			     root = root.right;	
		 }
	             return true;
	}
}