You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.


What given:

list1 and list 2

head1     head2

Objective: merge both linked list into sorted linked list



What draw:
	

list1 = 1 -> 3 -> 5		/Sorted
	
list2 = 1 -> 2 -> 9 -> 14	/Sorted


Final:
	  1-> 1 -> 2 -> 3 -> 5 -> 9 -> 14

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]




How to merge?


a) compare h1 and h2
	if h1 small -> add h1 in ans , move h1
	else if h2 is small -> add h2 in and , move h2

b) compare h1 and h2
	...


c) What corner case? if h1 or h2 reaches null -> print other list elements as it is

	
		
		h1   h1   
list1: 	1 -> 3 -> 5
	
		h2
list2: 	1 -> 2 -> 9 -> 14



ans :     1 -> 1 -> 2 -> 3 -> 5


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Pseudo Code:


a) Crete a function merge of type LL, input arg first and second LL, returns LL

b) create 2 heads of type Node
	Node f = first.head;
	Node s = second.head;

c) Create ans linkedlist of type LL

	LL ans = new LL();
	
d) while(any of 2 heads dont become null )
	if(first head value < second head value) {
		insert at last of ans LL
	}
	




+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public static LL merge(LL first, LL second){

        Node f = first.head;
        Node s = second.head;

        LL ans = new LL();

        while(f != null && s != null) {
            if(f.value < s.value) {
                ans.insertLast(f.value);
                f = f.next;
            } else {
                ans.insertLast(s.value);
                s = s.next;
            }
        }

	    while(f != null) {
                ans.insertLast(f.value);
                f = f.next;
        }

        while(s != null) {
                ans.insertLast(s.value);
                s = s.next;
        }

	    return ans;
}



public static void main(String[] args) {
	LL first = new LL();
	
	LL second = new LL();

	first.insertLast(1);
	first.insertLast(3);
	first.insertLast(5);


	second.insertLast(1);
	second.insertLast(2);
	second.insertLast(9);
	second.insertLast(14);

	LL ans = LL.merge(first,second);
	ans.display();

	

}



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Code:				//Returning entire linked list


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        	ListNode dummyHead = new ListNode();
            ListNode tail = dummyHead;
	        while(list1 != null && list2 != null) {
                if(list1.val < list2.val) {
                    tail.next = list1;
                    list1 = list1.next;
			        tail = tail.next;
                } else {
           	        tail.next = list2;
			        list2 = list2.next;
			        tail = tail.next;     
            }
        }

	    tail.next = list1 != null ? list1 : list2;
		return dummyHead.next;

    }
}
 


------------------------------------------------------

What TC? size of first + size of second
What SC? extra space to return new list + size of first + size of second

------------------------------------------------------

Code Java	//Returning entire linked list

public class Main {
    public static void main(String[] args) {
        LL first = new LL();
        LL second = new LL();

        first.insertLast(1);
        first.insertLast(3);
        first.insertLast(5);


        second.insertLast(1);
        second.insertLast(2);
        second.insertLast(9);
        second.insertLast(14);

        LL ans = LL.merge(first,second);
        ans.display();
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public class LL {
    private Node head;
    private Node tail;
    private int size;

    public LL() {
        this.size = 0;
    }

    public static LL merge(LL first, LL second){

        Node f = first.head;
        Node s = second.head;

        LL ans = new LL();

        while(f != null && s != null) {
            if(f.value < s.value) {
                ans.insertLast(f.value);
                f = f.next;
            } else {
                ans.insertLast(s.value);
                s = s.next;
            }
        }

	    while(f != null) {
                ans.insertLast(f.value);
                f = f.next;
        }

        while(s != null) {
                ans.insertLast(s.value);
                s = s.next;
        }

	    return ans;
}


    public void duplicates() {
        Node node = head;

        while(node.next != null) {
            if(node.value == node.next.value){
                node.next = node.next.next;
                size --;
            } else {
                node = node.next;
            }
        }
        tail = node;
        tail.next= null;

    }


    public void insertRec(int val, int index) {
        head = insertRec(val, index, head);
    }
    private Node insertRec(int val, int index, Node node) {
        if (index == 0) {
            Node temp = new Node(val, node);
            size++;
            return temp;
        }

        node.next = insertRec(val, index-1, node.next);
        return node;
    }

    public int deleteLast(){
        if(size<=1){
            return deleteFirst();
        }

        Node secondLast = get(size - 2);	//get the second last node
        int val = tail.value;
        tail = secondLast;
        tail.next = null;

        return val;

    }
    public Node get(int index) {
        Node node = head;

        for(int i = 0;i< index; i++){
            node = node.next;
        }
        return node; 		//returns reference pointer to that node
    }

    public int deleteFirst() {
        int val = head.value;	//get head value
        head = head.next;	//point head reference to next
        if(head == null){	//add corner case
            tail = null;		//if head null,make tail also null
        }
        size--;
        return val;

    }

    public void insert(int val, int index){
        if(index == 0){
            insertFirst(val);
            return;
        }
        if(index == size){
            insertLast(val);
            return;
        }
        Node temp = head;
        for(int i=1; i< index; i++) {
            temp = temp.next;
        }

        Node node = new Node(val, temp.next);	//before breaking link point new node
        temp.next = node;			//break the link
        size++;
    }
    public void insertLast(int val){
        if(tail == null){
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next = node;
        tail = node;
        size++;
    }


    public void insertFirst(int val) {
        Node node = new Node(val);
        node.next = head;
        head = node;

        if (tail == null) {
            tail = head;
        }
        size += 1;
    }

    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("END");
    }

    private class Node {
        private int value;
        private Node next;

        public Node(int value) {
            this.value = value;
        }

        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }
    }

}